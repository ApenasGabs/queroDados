name: Scrape OLX and Zap and push results

on:
  push:
    branches:
      - main
  schedule:
    - cron: "40 4 * * *"
  workflow_dispatch:

env:
  RESULTS_DIR: "data/results"
  QUEROCASA_DIR: "querocasa"
  MAX_RETRIES: 3
  RETRY_DELAY: 10

jobs:
  olx-scraper:
    runs-on: ubuntu-latest
    outputs:
      artifact-path: ${{ steps.upload-olx-artifact.outputs.artifact-path }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci --prefer-offline

      - name: Install required system packages
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb libxss1 libgtk-3-0 libnotify-dev libnss3 libx11-xcb1
      - name: Create results directory
        run: mkdir -p data/results

      - name: Run OLX scraper with retries
        id: olx-scraper
        run: |
          set +e
          for i in $(seq 1 $MAX_RETRIES); do
            echo "Attempt $i of $MAX_RETRIES"
            Xvfb :99 -ac -screen 0 1280x1024x16 &
            export DISPLAY=:99
            if node scrapers/index.js olx ${{ secrets.MAX_PRICE }}; then
              echo "Scraping completed successfully"
              break
            else
              echo "Scraping failed on attempt $i"
              if [ $i -lt $MAX_RETRIES ]; then
                echo "Waiting $RETRY_DELAY seconds before retry..."
                sleep $RETRY_DELAY
              else
                echo "All attempts failed, creating empty results file"
                echo "[]" > data/results/olxResults.json
              fi
            fi
          done
          set -e

      - name: Validate OLX results
        run: |
          if [ -f "data/results/olxResults.json" ]; then
            if ! jq empty data/results/olxResults.json 2>/dev/null; then
              echo "Invalid JSON, creating empty array"
              echo "[]" > data/results/olxResults.json
            fi
          else
            echo "Results file not found, creating empty one"
            echo "[]" > data/results/olxResults.json
          fi

      - name: Save OLX results as an artifact
        id: upload-olx-artifact
        uses: actions/upload-artifact@v4
        with:
          name: olx-results
          path: data/results
          retention-days: 1

  zap-scraper:
    runs-on: ubuntu-latest
    outputs:
      artifact-path: ${{ steps.upload-zap-artifact.outputs.artifact-path }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci --prefer-offline

      - name: Install required system packages
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb libxss1 libgtk-3-0 libnotify-dev libnss3 libx11-xcb1
      - name: Create results directory
        run: mkdir -p data/results

      - name: Run Zap scraper with retries
        id: zap-scraper
        run: |
          set +e
          for i in $(seq 1 $MAX_RETRIES); do
            echo "Attempt $i of $MAX_RETRIES"
            Xvfb :99 -ac -screen 0 1280x1024x16 &
            export DISPLAY=:99
            if node scrapers/index.js zap ${{ secrets.MAX_PRICE }}; then
              echo "Scraping completed successfully"
              break
            else
              echo "Scraping failed on attempt $i"
              if [ $i -lt $MAX_RETRIES ]; then
                echo "Waiting $RETRY_DELAY seconds before retry..."
                sleep $RETRY_DELAY
              else
                echo "All attempts failed, creating empty results file"
                echo "[]" > data/results/zapResults.json
              fi
            fi
          done
          set -e

      - name: Validate Zap results
        run: |
          if [ -f "data/results/zapResults.json" ]; then
            if ! jq empty data/results/zapResults.json 2>/dev/null; then
              echo "Invalid JSON, creating empty array"
              echo "[]" > data/results/zapResults.json
            fi
          else
            echo "Results file not found, creating empty one"
            echo "[]" > data/results/zapResults.json
          fi

      - name: Save Zap results as an artifact
        id: upload-zap-artifact
        uses: actions/upload-artifact@v4
        with:
          name: zap-results
          path: data/results
          retention-days: 1

  download-and-update-repo:
    runs-on: ubuntu-latest
    needs: [olx-scraper, zap-scraper]
    timeout-minutes: 45

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Clone the target repository
        run: |
          git clone https://github.com/${{ secrets.TARGET_REPO_URL }}.git querocasa
        env:
          GITHUB_TOKEN: ${{ secrets.TARGET_REPO_PAT }}

      - name: Checkout to api branch and update
        run: |
          cd querocasa
          git fetch origin
          git checkout -b api origin/api || git checkout -b api
          git config pull.rebase false
          git pull origin api

      - name: Create results directory
        run: mkdir -p querocasa/data/results

      - name: Configure Git user
        run: |
          cd querocasa
          git config --global user.name "${{ secrets.GIT_USER_NAME }}"
          git config --global user.email "${{ secrets.GIT_USER_EMAIL }}"

      - name: Download OLX artifact
        uses: actions/download-artifact@v4
        with:
          name: olx-results
          path: querocasa/data/results

      - name: Download Zap artifact
        uses: actions/download-artifact@v4
        with:
          name: zap-results
          path: querocasa/data/results

      - name: Verify downloaded artifacts
        run: |
          echo "Verificando artefatos baixados..."
          cd querocasa/data/results
          ls -la

          # Verifica e corrige arquivos se necessário
          for platform in olx zap; do
            file="${platform}Results.json"
            if [ ! -f "$file" ] || [ ! -s "$file" ]; then
              echo "[]" > "$file"
              echo "Arquivo $file criado/reescrito vazio"
            elif ! jq empty "$file" 2>/dev/null; then
              echo "[]" > "$file"
              echo "Arquivo $file contém JSON inválido, substituído por array vazio"
            fi
          done

      - name: Install dependencies in querocasa
        run: |
          cd querocasa
          npm ci --prefer-offline

      - name: Validate scraped data
        run: |
          echo "Validando dados coletados..."
          cd querocasa
          if [ -f "scripts/validateData.js" ]; then
            if ! node scripts/validateData.js; then
              echo "::warning::Alguns problemas foram encontrados na validação"
            fi
          else
            echo "Script validateData.js não encontrado, pulando validação"
          fi

      - name: Merge and update results
        run: |
          echo "Mesclando resultados..."
          cd querocasa
          node scripts/mergeResults.js
          echo "Resultados mesclados com sucesso!"

      - name: Update coordinates
        run: |
          echo "Atualizando coordenadas..."
          cd querocasa
          if [ -f "scripts/updateCoordinates.js" ]; then
            node scripts/updateCoordinates.js ${{ secrets.GEOCODE_HERE_API_KEY }} || echo "Erro ao atualizar coordenadas"
          else
            echo "Script updateCoordinates.js não encontrado, pulando etapa"
          fi

      - name: Commit and push changes
        run: |
          cd querocasa
          echo "Preparando para commit..."
          git add .

          echo "Verificando mudanças..."
          if git diff-index --quiet HEAD --; then
            echo "Nenhuma mudança detectada."
          else
            echo "Efetuando commit das mudanças..."
            git commit -m ":rocket: Atualização automática de dados [$(date +'%Y-%m-%d %H:%M')]"
            
            echo "Efetuando push para o repositório..."
            git push https://${{ secrets.TARGET_REPO_PAT }}@github.com/${{ secrets.TARGET_REPO_URL }}.git HEAD:api
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.TARGET_REPO_PAT }}
